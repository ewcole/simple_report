def version = "0.0.2"

// What branch do we have checked out?
def currentGitBranch = "git branch".execute().text.readLines()
    .grep {it =~ /^\*/}.first().replaceAll(/^\* /,'')

project.version = version + ((currentGitBranch=='prod')?'':"-$currentGitBranch")
project.group = "edu.sunyjcc"

println "Version: ${project.version}"

def jccGroovydocHome = 'x:/doc/groovydoc'

repositories {
  // Where do we look for dependencies?
  mavenCentral()
}


apply plugin: 'groovy'

dependencies {
  compile 'org.codehaus.groovy:groovy-all:1.8.9'
  testCompile 'junit:junit:4.11'
}

// // http://gradle.1045684.n5.nabble.com/using-jdbc-driver-in-a-task-fails-td1435189.html
// configurations {
//   driver
// }

// repositories {
//   flatDir name: 'localRepository', dirs: 'lib'
// }

// dependencies {
//   driver name: 'ojdbc6'
// }

// task sql << {
//   URLClassLoader loader = GroovyObject.class.classLoader
//   configurations.driver.each {
//     File file ->
//     loader.addURL(file.toURL())
//   }
//   Class driverClass = loader.loadClass('oracle.jdbc.OracleDriver')
//   java.sql.Driver driverInstance = driverClass.newInstance()
//   java.sql.DriverManager.registerDriver(driverInstance)
// }

// // test {
// //   classpath = project.sourceSets.test.runtimeClasspath + 
// //       files('x:/source/main/jars/ojdb6.jar')
// // }
// //sourceSets.test.runtimeClasspath << new File("C:/grails/grails-1.3.7/lib/ojdbc6.jar");

/***********************************************************************/
/* jar file options                                                    */
/***********************************************************************/

// Include the project version number in the jar file name.
jar.version  = version + ((currentGitBranch == 'prod')?'':"-$currentGitBranch")

/***********************************************************************/
/* groovydoc options                                                   */
/***********************************************************************/
groovydoc.groovyClasspath = configurations.compile
if (currentGitBranch == 'prod') {
  groovydoc.destinationDir = new File(jccGroovydocHome)
}
groovydoc {

  // These are needed so that objects (from other packages) referenced in the
  //    groovydoc will be linked to their definitions in the external
  //    documentation
  link("http://docs.oracle.com/javase/6/docs/api", 
       "java.,org.xml.,javax.,org.xml.")
  link("http://www.dpml.net/api/ant/1.7.0", 
       "org.apache.ant.,org.apache.tools.ant.")
  link("http://junit.sourceforge.net/junit3.8.1/javadoc/", 
       "org.junit.,junit.framework.")
  link("http://groovy.codehaus.org/api/", "groovy.,org.codehaus.groovy.")
  link("file://$jccGroovydocHome", "edu.sunyjcc.")
}

// Make it so that it will automatically generate the documentation and jar 
// file when you execute the build target.

task wrapper(type: Wrapper) {
  gradleVersion = '1.10'
}

task compile
compile.dependsOn compileGroovy, compileJava
build.dependsOn jar, test, wrapper

/**********************************************************************/
/* Deploy to Maven server                                             */
/**********************************************************************/
apply plugin: 'maven'

uploadArchives {
  repositories {
    mavenDeployer {
        repository(url: "file://x:/source/mvn")
    }
  }
}

uploadArchives.dependsOn build, test
task deploy
deploy.dependsOn groovydoc, uploadArchives, build
