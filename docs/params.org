#+TITLE: Parameters
#+DATE: <2014-09-08 Mon>
#+AUTHOR: Ed Cole
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.2.1 (Org mode 8.2.6)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil
#+OPTIONS: html-preamble:nil html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.2.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="docs.css" />

* Parameters
The first functional part of the system will be a scheme to collect parameters from the users and pass them on to the apps that request them.  The work will be divided into parameter definitions and parameter values.
** Define parameters and parameter sets.
This work is handled by [[file:..\src\main\groovy\edu\sunyjcc\simple_report\Param.groovy][Param.groovy]], which defines the individual parameters, [[ file:..\src\main\groovy\edu\sunyjcc\simple_report\ParamList.groovy][ParamList.groovy]], which defines lists of parameters, and [[file:..\src\main\groovy\edu\sunyjcc\simple_report\ParamType.groovy][ParamType.groovy]], which defines parameter types.
*** Validation
The parameters will define methods for validating individual parameters and lists of parameters.
*** Re-Use
We will be able to load pre-defined parameters from the environment.  We can build an inheritance hierarchy between parameters.
*** Lists of values
A parameter can provide functions that list valid values.
** Collect the parameters for an application
*** Present a parameter form to the client
The parameter form will take a different form depending on the client environment.  This will have to be a set of adapters for each environment.
*** Perform client-side validation
Some clients (such as web browsers) have the ability to validate data before returning it to the server.
*** Deliver validated parameters to an application
This would be a second adapter, based on the type of application called.
