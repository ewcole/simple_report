#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Presentation - Drop-in Reporting with Groovy
# #+DATE: <2017-07-28 Fri>
#+AUTHOR: Ed Cole
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 9.0.5)
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil
#+OPTIONS: html-preamble:nil html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.5.1 (<a href="http://orgmode.org">Org</a> mode 9.0.5)
#+LATEX_HEADER:

* Introduction
** This is a REAL solution to a real problem. :why:
We have over 600 Oracle Reports applications that need to be converted into a new and non-deprecated format.  These reports produce everything from CSV files to paychecks.  

Oracle Reports isn't well suited to creating data files, so there had been an unfilled need for some time, but Oracle has started to give hints that Reports won't be around forever.  We needed a new solution.

** It started with a dream.                                            :what:
Many of our reports are essentially an SQL query, which we have to embed in some kind of program, which could be SQL*Plus, Oracle Reports, a web application, PL/SQL web pages, or other complicated tools).  What if we could just drop that query into a container that will do the work of getting the parameters and formatting the output?  Or, if the report is more complicated, how about a simple DSL that will let us specify the bare minimum of what we need?

I  had the idea of storing the SQL in the database and serving them through SSB (mod_plsql), but then Groovy and Grails came into my life.
** Making it happen :how:
*** Groovy gives us the power to make this dream a reality.

 Groovy has features that make this idea practical.  Some of them are common to any programming language, and some of them are unique to Groovy.

**** What is Groovy?
The Groovy programming language is a chopped, lowered, louvered, and flame-painted Java.  

**** Properties that Groovy shares with many programming environments
- Dynamic SQL (PL/SQL can do it, but it is brittle and I usually regret using it.)
- Read and write from the file system
- Read and write web protocols
- Runs on the Java Virtual Machine (which makes it easy to deploy applications through Tomcat and opens the door to a huge library that is easy to access through Maven repositories)
**** Uniquely Groovy
- Easy-to-use interface for SQL and XML
- Scripting 
- Closures and functional programming 
- Builders and DSL's
- "Easy" web applications with Grails
*** Implementation
- A POGO library which defines the DSL and executes the reports
- A Grails application that provides a user interface for the report library
- Possibly other front ends in the future
- Jasper Reports for fancy report delivery
* Overview
** General Principles                                                   :why:
*** Open Source Tools
These tools require no licensing fees and are generally high quality and developer-friendly.
*** Plain text
Storing the source code for our reports in text files on the report server means that we can manipulate them with a host of standard tools.  For example, we can:
- Protect our source with Git revision control
- Search for table references using standard operating system commands (grep/findstr)
- Use the editor of our choice to edit them
*** Environment Agnostic
The report knows nothing of the environment or front end that it will execute in.
** What do these reports look like?                            :example:what:
Let's see what kind of reports are possible.
*** SQL example :sql:
The simplest report we can define is an SQL statement.  
**** sql/dd_referencing_objects.sql
#+include: "sample_reports/sql/dd_referencing_objects.sql" src sql

Note the bind variable in the query, ~:object_name~.  When we run the report, it displays a parameter form with that parameter.

[[file:sql_example_params.png]]

Let's enter ~jcc_gbr_email~, the name of one of our packages, and look at the CSV output.

#+include: "sample_reports/dd_referencing_objects.csv" src csv
*** Simple Groovy SQL Example                                        :groovy:
Our second example shows a simple case of the Groovy-based DSL.  

First, we tell the builder that we are creating a report, with a title, "List User Tables."
#+begin_src groovy
report(title: 'List User Tables') {
  // Parameters, data generators and other
  //  interesting things will go here.
}
#+End_src


Next we define a parameter named "owner" with a list of values defined by an SQL query.

#+include: "sample_reports/report/list_user_tables.groovy" src groovy :lines "4-15"

Then we add a second parameter.

#+include: "sample_reports/report/list_user_tables.groovy" src groovy :lines "16-22"

And, finally, Add a query which references these parameters.

#+include: "sample_reports/report/list_user_tables.groovy" src groovy :lines "22-30"

When we put this all together, we get this script.

#+include: "sample_reports/report/list_user_tables.groovy" src groovy

[[file:groovy_example_1_params.png]]

Running the script gives us the following result.

| TABLE_NAME          | COMMENTS                                    |
|---------------------+---------------------------------------------|
| T_CENSUS_ROSTER     | This table has one row per course per term. |
| T_STU_CENSUS_ROSTER | The roster of students in this course       |

Let's look a little more closely.
*** Groovy Dynamic SQL Example                                       :groovy:
Sometimes our situation is less favorable, and we feel the need to customize the SQL before we execute it.  For instance, we might want to have a different where clause when the user enters certain search criteria.

Here is a table (~SUMMIT_GRADES~) with mid-semester grades and final grades.
| STUDENT_ID | SEMESTER | MID_GRADE | FINAL_GRADE |
|------------+----------+-----------+-------------|
|         12 |   201612 | A         | A           |
|         13 |   201612 | C         | B           |
|         14 |   201612 | F         | A           |
|         12 |   201705 | B         | A           |
|         13 |   201705 | C         | A           |
|         15 |   201712 | F         | D           |

And we will create a dynamic SQL report that prints a summary of the grades.

#+include: "sample_reports/report/dynamic_sql_query.groovy" src groovy   
# [[file:dynamic_sql_query_params.png]]

When you run the report with ~:mid_or_final = 'M'~ and ~:grade = 'F'~, the closure returns the following SQL query.

#+begin_src sql
select semester,
       count(mid_grade) as mid_grade,
       sum(decode(mid_grade, :grade, 1, 0)
          ) F_grades
    from summit_grades
    group by semester
    order by semester
#+end_src

We see the following results.

| SEMESTER | MID_GRADE | F_GRADES |
|----------+-----------+----------|
|   201612 |         3 |        1 |
|   201705 |         2 |        0 |
|   201712 |         1 |        1 |


# *** Groovy Closure Example                                           :groovy:
# #+include: "sample_reports/report/dev_closure_query.groovy" src groovy
# | num | square | cube |
# |-----+--------+------|
# |   1 |      1 |    1 |
# |   2 |      4 |    8 |
# |   3 |      9 |   27 |
# |   4 |     16 |   64 |
# |   5 |     25 |  125 |

*** Groovy Closure Example                                           :groovy:
Let's look at an example that would be very hard to do in most reporting tools.

~SQL> select * from summit_sql;~
| ID | SQL_QUERY                 |
|----+---------------------------|
|  1 | select user from dual     |
|  2 | select sloozle from fleem |
This table holds two SQL select statements, one of them valid and the other probably not.

#+include: "sample_reports/report/closure_query_2.groovy" src groovy

| id | sql_query                 | error                                   |
|----+---------------------------+-----------------------------------------|
|  2 | select sloozle from fleem | ORA-00942: table or view does not exist |
   
*** Jasper Reports                                            :jasperReports:
One of the big attractions of Jasper reports is the fact that it is a Java-based application, which means that it is easy to integrate into our environment.  
  
** Implementation :how:

*** Groovy Closures and Delegation

*** Groovy Builders
