#+TITLE: Simple Report Roadmap
#+AUTHOR: Ed Cole
#+EMAIL: coleew01@JITECPC21
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.2.1 (Org mode 8.2.6)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.2.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:

This is now an official MIS project; it will be used as a generator for CSV files, as well as a parameter form generator for Jasper Reports.

* Pre-production
** TODO Make it compatible with Grails
Make sure it will run with a Grails front end or plugin.  That might involve making the move to Grails 2
** TODO Resource Loader
The resource loader will plug into the SimpleReportBuilder and load objects by name as they are requested.
* Version 1.0
  Version 1.0 must have the basic parameter functionality fully functional.  We will initially target command line scripts and Grails.
We will not attempt to allow validation, inheritance, or chains of source factories yet.
** Parameters
*** DONE Source Factory
Created a SourceFactory class to simplify implementation of different kinds of SourceFactory.
**** DONE FileSourceFactory
**** TODO SourcePathSourceFactory
This should accept a string representing a path representing different source sources and convert them into a chain of SourceFactories.  The first factory in the list that can provide an object of the requested type is the winner.  

This will be the default type of SourceFactory.
*** TODO Report Object Factory
**** DONE Get the source code from a factory
**** DONE Convert the source code into report objects.
**** DONE Cache report object definitions
Creating the objects will be an expensive process, so let's save the results of our queries.
**** TODO Create parameter list from JRXML
Pull out all /jasperReport/parameter elements from the jrxml and create parameters of the appropriate type for them.  Look for an existing parameter of the same name and use that if it is compatible.
*** TODO Create report object values
These are not cached.  This will be done in the individual object types.
**** TODO ParamValue
**** TODO ParamFormValue
*** TODO ClientInteraction
We need a class that handles interaction with client environments.  Duties include displaying a parameter form, validating data.  In the future, it might also take on the responsibility of executing queries and displaying the results.
**** TODO CliBuilderClientInteraction
**** TODO GrailsClientInteraction
