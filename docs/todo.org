#+TITLE: Simple Report Roadmap
#+AUTHOR: Ed Cole
#+EMAIL: coleew01@JITECPC21
#+STARTUP: showall
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.2.1 (Org mode 8.2.6)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil
#+OPTIONS: html-preamble:nil html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.2.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:

This is now an official MIS project; it will be used as a generator for CSV files, as well as a parameter form generator for Jasper Reports.

* Pre-production
** DONE Make it compatible with Grails
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2014-12-17 Wed 16:03]
   :END:
Make sure it will run with a Grails front end or plugin.  That might involve making the move to Grails 2
** DONE Resource Loader
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2014-12-17 Wed 16:04]
   :END:
The resource loader will plug into the SimpleReportBuilder and load objects by name as they are requested.
* Version 0.1.0
  Version 0.1.0 must have the basic parameter functionality fully functional.  We will initially target command line scripts and Grails.
We will not attempt to allow validation, inheritance, or chains of source factories yet.
** Parameters
*** DONE Source Factory
Created a SourceFactory class to simplify implementation of different kinds of SourceFactory.
**** DONE FileSourceFactory
**** TODO SourcePathSourceFactory
This should accept a string representing a path representing different source sources and convert them into a chain of SourceFactories.  The first factory in the list that can provide an object of the requested type is the winner.  

This will be the default type of SourceFactory.
*** DONE Report Object Factory
**** DONE Get the source code from a factory
**** DONE Convert the source code into report objects.
**** DONE Cache report object definitions
Creating the objects will be an expensive process, so let's save the results of our queries.
**** DONE Create invocation for objects
*** DONE Create report object values
These are not cached.  This will be done in the individual object types.
**** DONE ParamValue
**** DONE ParamFormValue
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2014-11-06 Thu 10:12]
     :END:
*** CANCELED Client
Defer this to a later version.

We need a class that handles interaction with client environments.  Duties include displaying a parameter form, validating data.  In the future, it might also take on the responsibility of executing queries and displaying the results.
** CANCELED Create parameter list from JRXML
*Defer this to a later version.*

Pull out all /jasperReport/parameter elements from the jrxml and create parameters of the appropriate type for them.  Look for an existing parameter of the same name and use that if it is compatible.
* Pre-Production
** Version 0.2.0
*** DONE Auto documentation
** Version 0.3.0
*** DONE Integrate with menu system
** Version 0.4.0
*** TODO Lists of Values
* Version 1
** Version 1.2.1
** Version 1.3.0 
*** TODO Run Jasper Reports
Run Jasper reports; take parameter form from parameter form defs.
* Future Versions
** TODO Inheritance
** TODO Validation
** TODO Run Jobs
